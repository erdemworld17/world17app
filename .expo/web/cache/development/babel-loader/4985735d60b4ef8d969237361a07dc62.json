{"ast":null,"code":"global.swisscalc = global.swisscalc || {};\nglobal.swisscalc.lib = global.swisscalc.lib || {};\n\nglobal.swisscalc.lib.operator = function (arity, associativity, precedence, numOperands, isOpenParen, isCloseParen, evaluate) {\n  this.Arity = arity;\n  this.Associativity = associativity;\n  this.Precedence = precedence;\n  this.NumOperands = numOperands;\n  this.IsOpenParen = isOpenParen;\n  this.IsCloseParen = isCloseParen;\n  this.evaluate = evaluate;\n};\n\nglobal.swisscalc.lib.operator.ARITY_NULLARY = 0;\nglobal.swisscalc.lib.operator.ARITY_UNARY = 1;\nglobal.swisscalc.lib.operator.ARITY_BINARY = 2;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_NONE = 0;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_RIGHT = 1;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_LEFT = 2;\n\nglobal.swisscalc.lib.operator.degreesToRadians = function (degrees) {\n  return degrees * (Math.PI / 180.0);\n};\n\nglobal.swisscalc.lib.operator.radiansToDegrees = function (radians) {\n  return radians * (180.0 / Math.PI);\n};\n\nglobal.swisscalc.lib.operator.prototype.isHigherPrecedence = function (operator) {\n  if (this.Precedence == operator.Precedence) return this.Associativity == global.swisscalc.lib.operator.ASSOCIATIVITY_LEFT;\n  return this.Precedence > operator.Precedence;\n};","map":{"version":3,"sources":["/Users/erdemcankaya/react_projects/app/reactnative-companyapp/lib/swisscalc.lib.operator.js"],"names":["global","swisscalc","lib","operator","arity","associativity","precedence","numOperands","isOpenParen","isCloseParen","evaluate","Arity","Associativity","Precedence","NumOperands","IsOpenParen","IsCloseParen","ARITY_NULLARY","ARITY_UNARY","ARITY_BINARY","ASSOCIATIVITY_NONE","ASSOCIATIVITY_RIGHT","ASSOCIATIVITY_LEFT","degreesToRadians","degrees","Math","PI","radiansToDegrees","radians","prototype","isHigherPrecedence"],"mappings":"AAOAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,IAAoB,EAAvC;AACAD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,GAAuBF,MAAM,CAACC,SAAP,CAAiBC,GAAjB,IAAwB,EAA/C;;AACAF,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,GAAgC,UAASC,KAAT,EAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,WAAxD,EAAqEC,YAArE,EAAmFC,QAAnF,EAA6F;AAC5H,OAAKC,KAAL,GAAgBP,KAAhB;AACA,OAAKQ,aAAL,GAAsBP,aAAtB;AACA,OAAKQ,UAAL,GAAmBP,UAAnB;AACA,OAAKQ,WAAL,GAAoBP,WAApB;AACA,OAAKQ,WAAL,GAAoBP,WAApB;AACA,OAAKQ,YAAL,GAAoBP,YAApB;AACA,OAAKC,QAAL,GAAmBA,QAAnB;AACA,CARD;;AAWAV,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8Bc,aAA9B,GAAgD,CAAhD;AACAjB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8Be,WAA9B,GAA+C,CAA/C;AACAlB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BgB,YAA9B,GAA+C,CAA/C;AACAnB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BiB,kBAA9B,GAAoD,CAApD;AACApB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BkB,mBAA9B,GAAqD,CAArD;AACArB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BmB,kBAA9B,GAAoD,CAApD;;AAGAtB,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BoB,gBAA9B,GAAiD,UAASC,OAAT,EAAkB;AAAE,SAAOA,OAAO,IAAIC,IAAI,CAACC,EAAL,GAAU,KAAd,CAAd;AAAqC,CAA1G;;AACA1B,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BwB,gBAA9B,GAAiD,UAASC,OAAT,EAAkB;AAAE,SAAOA,OAAO,IAAI,QAAQH,IAAI,CAACC,EAAjB,CAAd;AAAqC,CAA1G;;AAGA1B,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8B0B,SAA9B,CAAwCC,kBAAxC,GAA6D,UAAS3B,QAAT,EAAmB;AAC/E,MAAI,KAAKU,UAAL,IAAmBV,QAAQ,CAACU,UAAhC,EACC,OAAQ,KAAKD,aAAL,IAAsBZ,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8BmB,kBAA5D;AACD,SAAQ,KAAKT,UAAL,GAAkBV,QAAQ,CAACU,UAAnC;AACA,CAJD","sourcesContent":["//\n// Eric Morgan\n// Copyright (c) 2014. \n//\n\n// Generic operator class. Implementation of individual operators will be defined in the OperatorCache.\n// \"evaluate\" should be a function that takes a global.swisscalc.lib.shuntingYard instance as a parameter and returns the result.\nglobal.swisscalc = global.swisscalc || {};\nglobal.swisscalc.lib = global.swisscalc.lib || {};\nglobal.swisscalc.lib.operator = function(arity, associativity, precedence, numOperands, isOpenParen, isCloseParen, evaluate) {\n\tthis.Arity \t\t\t= arity;\n\tthis.Associativity \t= associativity;\n\tthis.Precedence \t= precedence;\n\tthis.NumOperands \t= numOperands;\n\tthis.IsOpenParen \t= isOpenParen;\n\tthis.IsCloseParen = isCloseParen;\n\tthis.evaluate   \t= evaluate;\n};\n\n// Constants\nglobal.swisscalc.lib.operator.ARITY_NULLARY \t\t= 0;\nglobal.swisscalc.lib.operator.ARITY_UNARY \t\t\t= 1;\nglobal.swisscalc.lib.operator.ARITY_BINARY \t\t= 2;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_NONE \t= 0;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_RIGHT \t= 1;\nglobal.swisscalc.lib.operator.ASSOCIATIVITY_LEFT \t= 2;\n\n// Static functions\nglobal.swisscalc.lib.operator.degreesToRadians = function(degrees) { return degrees * (Math.PI / 180.0); };\nglobal.swisscalc.lib.operator.radiansToDegrees = function(radians) { return radians * (180.0 / Math.PI); };\n\n// Returns true if precedence is higher than given operator\nglobal.swisscalc.lib.operator.prototype.isHigherPrecedence = function(operator) {\n\tif (this.Precedence == operator.Precedence)\n\t\treturn (this.Associativity == global.swisscalc.lib.operator.ASSOCIATIVITY_LEFT);\n\treturn (this.Precedence > operator.Precedence);\n};"]},"metadata":{},"sourceType":"script"}