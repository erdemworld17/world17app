{"ast":null,"code":"global.swisscalc = global.swisscalc || {};\nglobal.swisscalc.lib = global.swisscalc.lib || {};\n\nglobal.swisscalc.lib.shuntingYard = function () {\n  this._numOpenParen = 0;\n  this._operands = [];\n  this._operators = [];\n  this._actionBuffer = [];\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.peekOperand = function () {\n  var len = this._operands.length;\n  return len !== 0 ? this._operands[len - 1] : 0.0;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.popOperand = function () {\n  var len = this._operands.length;\n  return len !== 0 ? this._operands.pop() : 0.0;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.numOperands = function () {\n  return this._operands.length;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.popOperator = function () {\n  return this._actionBuffer.pop();\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.numOperators = function () {\n  return this._actionBuffer.length;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.inSubExpression = function () {\n  return this._numOpenParen > 0;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.clear = function () {\n  this._operands.length = 0;\n  this._operators.length = 0;\n  this._actionBuffer.length = 0;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.evaluate = function () {\n  for (var i = 0; i < this._actionBuffer.length; i++) {\n    this._operators.push(this._actionBuffer[i]);\n  }\n\n  this._actionBuffer.length = 0;\n\n  while (this._operators.length > 0) {\n    var operator = this._operators.pop();\n\n    this.applyOperator(operator);\n  }\n\n  if (this._operands.length != 1) console.error(\"Invalid operand length (\" + this._operands.length + \")\");\n  return this._operands.pop();\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.applyOperator = function (operator) {\n  var val = operator.evaluate(this);\n  this.addOperand(val);\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addOperand = function (operand) {\n  this._operands.push(operand);\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addOperator = function (operator) {\n  if (operator.IsOpenParen) {\n    this.addOpenParen(operator);\n  } else if (operator.IsCloseParen) {\n    this.addCloseParen(operator);\n  } else if (operator.Arity == global.swisscalc.lib.operator.ARITY_NULLARY) {\n    this.addNullaryOperator(operator);\n  } else if (operator.Arity == global.swisscalc.lib.operator.ARITY_UNARY) {\n    this.addUnaryOperator(operator);\n  } else if (operator.Arity == global.swisscalc.lib.operator.ARITY_BINARY) {\n    this.addBinaryOperator(operator);\n  }\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addNullaryOperator = function (operator) {\n  this.applyOperator(operator);\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addUnaryOperator = function (operator) {\n  this.applyOperator(operator);\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addBinaryOperator = function (operator) {\n  while (this._actionBuffer.length > 0) {\n    var abLen = this._actionBuffer.length;\n    if (!this._actionBuffer[abLen - 1].isHigherPrecedence(operator)) break;\n\n    var prevOperator = this._actionBuffer.pop();\n\n    this.applyOperator(prevOperator);\n  }\n\n  this._actionBuffer.push(operator);\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addOpenParen = function (operator) {\n  this._actionBuffer.push(operator);\n\n  this._numOpenParen++;\n};\n\nglobal.swisscalc.lib.shuntingYard.prototype.addCloseParen = function (operator) {\n  if (this._numOpenParen === 0) return;\n  this._numOpenParen--;\n\n  while (this._actionBuffer.length > 0) {\n    var nextOperator = this._actionBuffer.pop();\n\n    if (nextOperator.IsOpenParen) return;\n    this.applyOperator(nextOperator);\n  }\n};","map":{"version":3,"sources":["/Users/erdemcankaya/react_projects/app/reactnative-companyapp/lib/swisscalc.lib.shuntingYard.js"],"names":["global","swisscalc","lib","shuntingYard","_numOpenParen","_operands","_operators","_actionBuffer","prototype","peekOperand","len","length","popOperand","pop","numOperands","popOperator","numOperators","inSubExpression","clear","evaluate","i","push","operator","applyOperator","console","error","val","addOperand","operand","addOperator","IsOpenParen","addOpenParen","IsCloseParen","addCloseParen","Arity","ARITY_NULLARY","addNullaryOperator","ARITY_UNARY","addUnaryOperator","ARITY_BINARY","addBinaryOperator","abLen","isHigherPrecedence","prevOperator","nextOperator"],"mappings":"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","sourcesContent":["//\n// Eric Morgan\n// Copyright (c) 2014. \n//\n\n// Implementation of the Shunting Yard algorithm.\nglobal.swisscalc = global.swisscalc || {};\nglobal.swisscalc.lib = global.swisscalc.lib || {};\nglobal.swisscalc.lib.shuntingYard = function() { \n\tthis._numOpenParen \t= 0;\n\tthis._operands \t\t= [];\n\tthis._operators \t= [];\n\tthis._actionBuffer \t= [];\n};\n\n// Peeks highest value on stack. Returns 0 if empty. \nglobal.swisscalc.lib.shuntingYard.prototype.peekOperand = function() {\n\tvar len = this._operands.length;\n\treturn (len !== 0) ? this._operands[len-1] : 0.0;\n};\n\n// Pops highest value on stack. Returns 0 if empty.\nglobal.swisscalc.lib.shuntingYard.prototype.popOperand = function() {\n\tvar len = this._operands.length;\n\treturn (len !== 0) ? this._operands.pop() : 0.0;\n};\n\n// Returns number of operands.\nglobal.swisscalc.lib.shuntingYard.prototype.numOperands = function() {\n\treturn this._operands.length;\n};\n\n// Pops highest operator on stack.\nglobal.swisscalc.lib.shuntingYard.prototype.popOperator = function() {\n\treturn this._actionBuffer.pop();\n};\n\n// Returns number of operators.\nglobal.swisscalc.lib.shuntingYard.prototype.numOperators = function() {\n\treturn this._actionBuffer.length;\n};\n\n// Returns true if currently evaluating sub-expression.\nglobal.swisscalc.lib.shuntingYard.prototype.inSubExpression = function() {\n\treturn this._numOpenParen > 0;\n};\n\n// Clears all stacks.\nglobal.swisscalc.lib.shuntingYard.prototype.clear = function() {\n\tthis._operands.length = 0;\n\tthis._operators.length = 0;\n\tthis._actionBuffer.length = 0;\n};\n\n// Empties the stack and returns the final evaluation.\nglobal.swisscalc.lib.shuntingYard.prototype.evaluate = function() {\n\t// Push all _actionBuffer to _operators...\n    for (var i = 0; i < this._actionBuffer.length; i++)\n        this._operators.push(this._actionBuffer[i]);\n    this._actionBuffer.length = 0;\n\t\t\n\t// Evaluate all _operators...\n\twhile (this._operators.length > 0) {\n\t\tvar operator = this._operators.pop();\n\t\tthis.applyOperator(operator);\n\t}\n\t\n\t// Check for errors and return result...\n\tif (this._operands.length != 1)\n\t\tconsole.error(\"Invalid operand length (\" + this._operands.length + \")\");\n        \n\treturn this._operands.pop();\n};\n\n// Evaluates the given operator and adds result to _operands.\nglobal.swisscalc.lib.shuntingYard.prototype.applyOperator = function(operator) {\n\tvar val = operator.evaluate(this);\n\tthis.addOperand(val);\n};\n\n// Adds an operand to the stack.\nglobal.swisscalc.lib.shuntingYard.prototype.addOperand = function(operand) {\n\tthis._operands.push(operand);\n};\n\n// Adds the given operator.\nglobal.swisscalc.lib.shuntingYard.prototype.addOperator = function(operator) {\n\tif (operator.IsOpenParen) {\n\t\tthis.addOpenParen(operator);\n\t} else if (operator.IsCloseParen) {\n\t\tthis.addCloseParen(operator);\n\t} else if (operator.Arity == global.swisscalc.lib.operator.ARITY_NULLARY) {\n\t\tthis.addNullaryOperator(operator);\n\t} else if (operator.Arity == global.swisscalc.lib.operator.ARITY_UNARY) {\n\t\tthis.addUnaryOperator(operator);\n\t} else if (operator.Arity == global.swisscalc.lib.operator.ARITY_BINARY) {\n\t\tthis.addBinaryOperator(operator);\n\t}\n};\n\n// Evaluates the NullaryOperator and pushes result to stack.\nglobal.swisscalc.lib.shuntingYard.prototype.addNullaryOperator = function(operator) {\n\tthis.applyOperator(operator);\n};\n\n// Evaluates the NullaryOperator and pushes result to stack.\nglobal.swisscalc.lib.shuntingYard.prototype.addUnaryOperator = function(operator) {\n\tthis.applyOperator(operator);\n};\n\n// First adds operator to _actionBuffer before committing to anything.\nglobal.swisscalc.lib.shuntingYard.prototype.addBinaryOperator = function(operator) {\n\t// If not parenthesis, perform precedence checks as usual...\n\twhile (this._actionBuffer.length > 0)\n\t{\n\t\t// If previous is not higher, exit...\n\t\tvar abLen = this._actionBuffer.length;\n\t\tif (!this._actionBuffer[abLen-1].isHigherPrecedence(operator))\n\t\t\tbreak;\n\t\t\t\n\t\tvar prevOperator = this._actionBuffer.pop();\n\t\tthis.applyOperator(prevOperator);\n\t}\n\t\n\tthis._actionBuffer.push(operator);\n};\n\n// Adds the open parenthesis operator. Just adds to _actionBuffer.\nglobal.swisscalc.lib.shuntingYard.prototype.addOpenParen = function(operator) {\n\tthis._actionBuffer.push(operator);\n\tthis._numOpenParen++;\n};\n\n// Adds the close parenthesis operator. Pops operators until open is reached.\nglobal.swisscalc.lib.shuntingYard.prototype.addCloseParen = function(operator) {\n\t// Ignore if no open parentheses...\n\tif (this._numOpenParen === 0)\n\t\treturn;\n\t\t\n\tthis._numOpenParen--;\n\twhile (this._actionBuffer.length > 0)\n\t{\n\t\t// If encountered an open paren, return...\n\t\tvar nextOperator = this._actionBuffer.pop();\n\t\tif (nextOperator.IsOpenParen)\n\t\t\treturn;\n\t\t\t\n\t\t// Evaluate the operator and then push it as an operand...\n\t\tthis.applyOperator(nextOperator);\n\t}\n};"]},"metadata":{},"sourceType":"script"}