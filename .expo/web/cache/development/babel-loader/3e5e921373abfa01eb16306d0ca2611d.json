{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"react-native-gesture-handler\";\nimport React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport OnboardingScreen from \"./components/OnboardingScreen\";\nimport MainRouter from \"./src/MainRouter\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nvar App = function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isAppFirstLaunched = _React$useState2[0],\n      setIsAppFirstLaunched = _React$useState2[1];\n\n  React.useEffect(function _callee() {\n    var appData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isAppFirstLaunched\"));\n\n          case 2:\n            appData = _context.sent;\n\n            if (appData == null) {\n              setIsAppFirstLaunched(true);\n              AsyncStorage.setItem(\"isAppFirstLaunched\", \"false\");\n            } else {\n              setIsAppFirstLaunched(false);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return isAppFirstLaunched != null && _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: [isAppFirstLaunched && _jsx(Stack.Screen, {\n        name: \"OnboardingScreen\",\n        component: OnboardingScreen\n      }), _jsx(Stack.Screen, {\n        name: \"MainRouter\",\n        component: MainRouter\n      })]\n    })\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/erdemcankaya/react_projects/app/reactnative-companyapp/App.js"],"names":["React","NavigationContainer","createStackNavigator","OnboardingScreen","MainRouter","AsyncStorage","Stack","App","useState","isAppFirstLaunched","setIsAppFirstLaunched","useEffect","getItem","appData","setItem","headerShown"],"mappings":";;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAGA,OAAOC,gBAAP;AACA,OAAOC,UAAP;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;;;AACA,IAAMC,KAAK,GAAGJ,oBAAoB,EAAlC;;AAEA,IAAMK,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,wBAAoDP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAApD;AAAA;AAAA,MAAOC,kBAAP;AAAA,MAA2BC,qBAA3B;;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQN,YAAY,CAACO,OAAb,CAAqB,oBAArB,CADR;;AAAA;AACRC,YAAAA,OADQ;;AAEd,gBAAIA,OAAO,IAAI,IAAf,EAAqB;AACnBH,cAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAL,cAAAA,YAAY,CAACS,OAAb,CAAqB,oBAArB,EAA2C,OAA3C;AACD,aAHD,MAGO;AACLJ,cAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB,EASG,EATH;AAWA,SACED,kBAAkB,IAAI,IAAtB,IACE,KAAC,mBAAD;AAAA,cACE,MAAC,KAAD,CAAO,SAAP;AAAiB,MAAA,aAAa,EAAE;AAAEM,QAAAA,WAAW,EAAE;AAAf,OAAhC;AAAA,iBACGN,kBAAkB,IACjB,KAAC,KAAD,CAAO,MAAP;AACE,QAAA,IAAI,EAAC,kBADP;AAEE,QAAA,SAAS,EAAEN;AAFb,QAFJ,EAOE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,YAAnB;AAAgC,QAAA,SAAS,EAAEC;AAA3C,QAPF;AAAA;AADF,IAFJ;AAeD,CA7BD;;AA+BA,eAAeG,GAAf","sourcesContent":["import \"react-native-gesture-handler\";\nimport React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\n//--------------- Screens\nimport OnboardingScreen from \"./components/OnboardingScreen\";\nimport MainRouter from \"./src/MainRouter\";\n//*************** Screens\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  const [isAppFirstLaunched, setIsAppFirstLaunched] = React.useState(null);\n\n  React.useEffect(async () => {\n    const appData = await AsyncStorage.getItem(\"isAppFirstLaunched\");\n    if (appData == null) {\n      setIsAppFirstLaunched(true);\n      AsyncStorage.setItem(\"isAppFirstLaunched\", \"false\");\n    } else {\n      setIsAppFirstLaunched(false);\n    }\n    // AsyncStorage.removeItem('isAppFirstLaunched');\n  }, []);\n\n  return (\n    isAppFirstLaunched != null && (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          {isAppFirstLaunched && (\n            <Stack.Screen\n              name=\"OnboardingScreen\"\n              component={OnboardingScreen}\n            />\n          )}\n          <Stack.Screen name=\"MainRouter\" component={MainRouter} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    )\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}